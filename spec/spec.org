* create a structure obj
** demo
for c code
#+begin_src c

VkApplicationInfo appinfo;
VkInstanceCreateInfo createInfo;
VkInstance instance;

appInfo.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
appInfo.pApplicationName = "test";
appInfo.applicationVersion = VK_MAKE_VERSION(1, 0, 0);
appInfo.pEngineName = "test";
appInfo.engineVersion = VK_MAKE_VERSION(1, 0, 0);
appInfo.apiVersion = VK_API_VERSION_1_0;

createInfo.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
createInfo.pApplicationInfo = &appInfo;
createInfo.enabledExtensionCount = 1;
createInfo.ppEnabledExtensionNames = {"some extension"};
createInfo.enabledLayerCount = 0;
createInfo.ppEnabledLayerNames = {"some layers"};
//create instnace
vkCreateInstance(&createInfo, NULL, &instance);

#+end_src

for lisp code
#+begin_src cl
(create-instance  ;;alloctor as default is null, and it will return a instance
  (make-instance-create-info 
    ;;type as default :structure-type-instance-create-info no need set
    ;;next as default null pointer you canset
    :app-info (make-application-info ;;type as default :structure-type-application-info
                                     ;;next as default null pointer you can set
				     :app-name "vk-app-name" 
				     :app-version (make-vulkan-version 0 0 0) 
				     :engine-name "vk-engine-name" 
				     :engine-version (make-vulakn-version 0 0 0 ) 
				     :api-version (make-vulakn-version 1 2 0))
    ;;no need to set layer count it will be the length of lauers
    :layers (list "aaa" "bbb")   
    ;;no need to set extensions count it will be the length of extension
    :extensions (list "ccc" "ddd"))) 
#+end_src
*** structure make api
*make-vulkan-version*
/major 1/ 
/minor 2/
/patch 0/

*make-offset-2d*
/:x 0/
/:y 0/


